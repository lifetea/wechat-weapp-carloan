<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
  page{
    height: 100%;
  }
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import { setStore } from 'wepy-redux'
import configStore from './store'
import carList from './data/car.js'
const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/main',
      'pages/login',
      'pages/start',
      'pages/index',
      'pages/person/index',
      'pages/person/cert',
      'pages/order/book',
      'pages/order/list',
      'pages/order/certificate',
      'pages/order/payment',
      'pages/person/phone',
      'pages/personIndex'
    ],
    window: {
      backgroundColor: '#efefef',
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      color: '#dddddd',
      selectedColor: '#ff4614',
      borderStyle: 'black',
      backgroundColor: '#ffffff',
      list: [
        {
          pagePath: 'pages/main',
          text: '首页',
          iconPath: 'images/home@2x.png',
          selectedIconPath: 'images/homeSelect@2x.png'
        },
        {
          pagePath: 'pages/person/index',
          text: '我的',
          iconPath: 'images/person@2x.png',
          selectedIconPath: 'images/personSelect@2x.png'
        }
      ]
    }
  }

  globalData = {
  }

  constructor () {
    super()
    this.use('requestfix')
    wepy.carList = carList
    // wepy.baseUrl = 'http://192.168.1.169:10002/'
    // wepy.baseUrl = 'http://192.168.1.252:10002/'
    // wepy.baseUrl = 'http://192.168.1.36:10002/'
    // wepy.baseUrl = 'http://192.168.1.220:10002/'
    wepy.baseUrl = 'https://ych.bluetimes.cn/'
    // 拦截request请求
    this.intercept('request', {
      // 发出请求时的回调函数
      config (p) {
        // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
        p.timestamp = +new Date()
        // p.url = 'https://ych.bluetimes.cn/' + p.url
        // p.url = 'http://192.168.1.252:10002/' + p.url
        if (p.url.indexOf('http') === 0 || p.url.indexOf('https') === 0) {

        } else {
          p.url = wepy.baseUrl + p.url
        }
        const token = wx.getStorageSync('token')
        p.header = {
          // 'content-type': 'application/x-www-form-urlencoded',
          'content-type': 'application/json',
          'token': token
        }
        console.log('app token', token)
        // if (!token) {
        //   p.header['token'] = token
        // }
        console.log('config request: ', p)
        // 必须返回OBJECT参数对象，否则无法发送请求到服务端
        return p
      },

      // 请求成功后的回调函数
      success (p) {
        // 可以在这里对收到的响应数据对象进行加工处理
        // console.log('request success: ', p)
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      fail (p) {
        console.log('request fail: ', p)
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      // 请求完成时的回调函数(请求成功或失败都会被执行)
      complete (p) {
        console.log('request complete: ', p)
      }
    })

    this.intercept('uploadFile', {
      // 发出请求时的回调函数
      config (p) {
        // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
        p.timestamp = +new Date()
        p.url = wepy.baseUrl + p.url
        const token = wx.getStorageSync('token')
        p.header = {
          'content-type': 'multipart/form-data;',
          // 'content-type': 'application/json',
          'token': token
        }
        // if (!token) {
        //   p.header['token'] = token
        // }
        // console.log('config request: ', p)
        // 必须返回OBJECT参数对象，否则无法发送请求到服务端
        return p
      },

      // 请求成功后的回调函数
      success (p) {
        // 可以在这里对收到的响应数据对象进行加工处理
        console.log('request success: ', p)
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      fail (p) {
        console.log('request fail: ', p)
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      // 请求完成时的回调函数(请求成功或失败都会被执行)
      complete (p) {
        console.log('request complete: ', p)
      }
    })
  }

  onLaunch() {
    // this.testAsync()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
